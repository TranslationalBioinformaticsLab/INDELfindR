prob_high_iq_without_lengths_se <- std_err(prob_high_iq_without_lengths)
prob_high_iq_without_lengths_N <- length(prob_high_iq_without_lengths)
sib_high_iq_without_lengths <- (high_iq_combined_variant_table_with_col_t_test_data_sub_without_variants %>% filter(affected_status == 0))["block_length_mb"]$block_length_mb
sib_high_iq_without_lengths_se <- std_err(sib_high_iq_without_lengths)
sib_high_iq_without_lengths_N <- length(sib_high_iq_without_lengths)
########################
#
# Run t tests
#
########################
# Run t test without mu - Results: not significant
# low_iq_t_test_results <- t.test(block_length_mb ~ affected_status, data = low_iq_combined_variant_table_with_col_t_test_data_sub_with_variants)
# high_iq_t_test_results <- t.test(block_length_mb ~ affected_status, data = high_iq_combined_variant_table_with_col_t_test_data_sub_with_variants)
# Try setting the difference in means(mu) - Results: 1) low_iq_t_test_results_with_mu_with_variants and 2) low_iq_t_test_results_with_mu_without_variants are significant and results look good - lets check with statisticians later on.
#calculate difference in means (mu)
difference_in_means_low_iq_with <- as.numeric(probands_low_iq_block_length_summary_with_variants["Mean"]) - as.numeric(siblings_low_iq_block_length_summary_with_variants["Mean"])
difference_in_means_high_iq_with<- as.numeric(probands_high_iq_block_length_summary_with_variants["Mean"]) - as.numeric(siblings_high_iq_block_length_summary_with_variants["Mean"])
# t test with variants
low_iq_t_test_results_with_mu_with_variants <- t.test(block_length_mb ~ affected_status, mu = difference_in_means_low_iq_with, data = low_iq_combined_variant_table_with_col_t_test_data_sub_with_variants)
high_iq_t_test_results_with_mu_with_variants <- t.test(block_length_mb ~ affected_status, mu = difference_in_means_high_iq_with, data = high_iq_combined_variant_table_with_col_t_test_data_sub_with_variants)
#calculate difference in means (mu)
difference_in_means_low_iq_without <- as.numeric(probands_low_iq_block_length_summary_without_variants["Mean"]) - as.numeric(siblings_low_iq_block_length_summary_without_variants["Mean"])
difference_in_means_high_iq_without <- as.numeric(probands_high_iq_block_length_summary_without_variants["Mean"]) - as.numeric(siblings_high_iq_block_length_summary_without_variants["Mean"])
# t test without variants
low_iq_t_test_results_with_mu_without_variants <- t.test(block_length_mb ~ affected_status, mu = difference_in_means_low_iq_without, data = low_iq_combined_variant_table_with_col_t_test_data_sub_without_variants)
high_iq_t_test_results_with_mu_without_variants <- t.test(block_length_mb ~ affected_status, mu = difference_in_means_high_iq_without, data = high_iq_combined_variant_table_with_col_t_test_data_sub_without_variants)
# create output table for plotting:
# save pvalues
low_iq_with_var_pval <- low_iq_t_test_results_with_mu_with_variants$p.value
high_iq_with_var_pval <- high_iq_t_test_results_with_mu_with_variants$p.value
low_iq_without_var_pval <- low_iq_t_test_results_with_mu_without_variants$p.value
high_iq_without_var_pval <- high_iq_t_test_results_with_mu_without_variants$p.value
# # calculate SE # old SE - one se value from t-test, but we need se of means of both prob and sib. See next code section.
# low_iq_with_var_se <- get_se_to_add_to_t_test_results(low_iq_t_test_results_with_mu_with_variants)
# high_iq_with_var_se <- get_se_to_add_to_t_test_results(high_iq_t_test_results_with_mu_with_variants)
# low_iq_without_var_se <- get_se_to_add_to_t_test_results(low_iq_t_test_results_with_mu_without_variants)
# high_iq_without_var_se <- get_se_to_add_to_t_test_results(high_iq_t_test_results_with_mu_without_variants)
# save averages
pro_low_iq_with_var_avg <- as.numeric(probands_low_iq_block_length_summary_with_variants["Mean"])
sib_low_iq_with_var_avg <-  as.numeric(siblings_low_iq_block_length_summary_with_variants["Mean"])
pro_high_iq_with_var_avg <-  as.numeric(probands_high_iq_block_length_summary_with_variants["Mean"])
sib_high_iq_with_var_avg <-  as.numeric(siblings_high_iq_block_length_summary_with_variants["Mean"])
pro_low_iq_without_var_avg <-  as.numeric(probands_low_iq_block_length_summary_without_variants["Mean"])
sib_low_iq_without_var_avg <-  as.numeric(siblings_low_iq_block_length_summary_without_variants["Mean"])
pro_high_iq_without_var_avg <-  as.numeric(probands_high_iq_block_length_summary_without_variants["Mean"])
sib_high_iq_without_var_avg <-  as.numeric(siblings_high_iq_block_length_summary_without_variants["Mean"])
# deprecated in place of manual SE calculation per prob and sib means instead of t-test stderr
# low_iq_with_var_se <- get_se_to_add_to_t_test_results(low_iq_t_test_results_with_mu_with_variants)
# high_iq_with_var_se <- get_se_to_add_to_t_test_results(high_iq_t_test_results_with_mu_with_variants)
# low_iq_without_var_se <- get_se_to_add_to_t_test_results(low_iq_t_test_results_with_mu_without_variants)
# high_iq_without_var_se <- get_se_to_add_to_t_test_results(high_iq_t_test_results_with_mu_without_variants)
# dev:
# calculate sample size for each of the 8 groups
# edit assemble_each_segment_table() to include the sample size
low_iq_with_var_table <- assemble_each_segment_table("low_iq_with_var",low_iq_with_var_pval,prob_low_iq_with_lengths_se,sib_low_iq_with_lengths_se,pro_low_iq_with_var_avg,sib_low_iq_with_var_avg,segment_size,prob_low_iq_with_lengths_N,sib_low_iq_with_lengths_N)
high_iq_with_var_table <- assemble_each_segment_table("high_iq_with_var",high_iq_with_var_pval,prob_high_iq_with_lengths_se,sib_high_iq_with_lengths_se,pro_high_iq_with_var_avg,sib_high_iq_with_var_avg,segment_size,prob_high_iq_with_lengths_N,sib_high_iq_with_lengths_N)
low_iq_without_var_table <- assemble_each_segment_table("low_iq_without_var",low_iq_without_var_pval,prob_low_iq_without_lengths_se,sib_low_iq_without_lengths_se,pro_low_iq_without_var_avg,sib_low_iq_without_var_avg,segment_size,prob_low_iq_without_lengths_N,sib_low_iq_without_lengths_N)
high_iq_without_var_table <- assemble_each_segment_table("high_iq_without_var",high_iq_without_var_pval,prob_high_iq_without_lengths_se,sib_high_iq_without_lengths_se,pro_high_iq_without_var_avg,sib_high_iq_without_var_avg,segment_size,prob_high_iq_without_lengths_N,sib_high_iq_without_lengths_N)
return(list(low_iq_with_var_table,high_iq_with_var_table,low_iq_without_var_table,high_iq_without_var_table))
}
###############################
#
# Function 4: Syn variants only vs no variants
#
###############################
run_t_test_and_assemble_avg_length_data_for_plotting_syn_variants_only <- function(probands_variant_table_for_t_test_filename,siblings_variant_table_for_t_test_filename,segment_size,results_directory) {
#   # dev on:
#   probands_variant_table_for_t_test_filename <- "probands_roh_block_variant_annotation_table_pph2_cat_2000kb.txt"
#   siblings_variant_table_for_t_test_filename <- "siblings_roh_block_variant_annotation_table_pph2_cat_2000kb.txt"
#   # dev off
probands_variant_table <- read.table(file.path(results_directory,probands_variant_table_for_t_test_filename),sep="\t",header=T, quote="\"")
siblings_variant_table <- read.table(file.path(results_directory,siblings_variant_table_for_t_test_filename),sep="\t",header=T, quote="\"")
# Run analysis
combined_roh_block_table_for_t_test <- rbind(probands_variant_table,siblings_variant_table)
# summaries match my manual averages
probands_low_iq_block_length_summary_with_variants <- summary(combined_roh_block_table_for_t_test %>% filter(total_lof_variants == 0 & variant_count_per_block_syn > 0) %>% filter(affected_status == 1) %>% filter(iq_status == 1) %>% .$block_length_mb)
siblings_low_iq_block_length_summary_with_variants <- summary(combined_roh_block_table_for_t_test %>% filter(total_lof_variants == 0 & variant_count_per_block_syn > 0) %>% filter(affected_status == 0) %>% filter(iq_status == 1) %>% .$block_length_mb)
probands_high_iq_block_length_summary_with_variants <- summary(combined_roh_block_table_for_t_test %>% filter(total_lof_variants == 0 & variant_count_per_block_syn > 0) %>% filter(affected_status == 1) %>% filter(iq_status == 0) %>% .$block_length_mb)
siblings_high_iq_block_length_summary_with_variants <- summary(combined_roh_block_table_for_t_test %>% filter(total_lof_variants == 0 & variant_count_per_block_syn > 0) %>% filter(affected_status == 0) %>% filter(iq_status == 0) %>% .$block_length_mb)
probands_low_iq_block_length_summary_without_variants <- summary(combined_roh_block_table_for_t_test %>% filter(total_lof_variants == 0 & variant_count_per_block_syn == 0) %>% filter(affected_status == 1) %>% filter(iq_status == 1) %>% .$block_length_mb)
siblings_low_iq_block_length_summary_without_variants <- summary(combined_roh_block_table_for_t_test %>% filter(total_lof_variants == 0 & variant_count_per_block_syn == 0) %>% filter(affected_status == 0) %>% filter(iq_status == 1) %>% .$block_length_mb)
probands_high_iq_block_length_summary_without_variants <- summary(combined_roh_block_table_for_t_test %>% filter(total_lof_variants == 0 & variant_count_per_block_syn == 0) %>% filter(affected_status == 1) %>% filter(iq_status == 0) %>% .$block_length_mb)
siblings_high_iq_block_length_summary_without_variants <- summary(combined_roh_block_table_for_t_test %>% filter(total_lof_variants == 0 & variant_count_per_block_syn == 0) %>% filter(affected_status == 0) %>% filter(iq_status == 0) %>% .$block_length_mb)
# add "contains_variants_status" column for t-test independent variable assignment
combined_variant_table_with_col <- transform(combined_roh_block_table_for_t_test, contains_variants_status = ifelse(total_lof_variants == 0 & variant_count_per_block_syn > 0, 1, 0))
# select columns for test to remove factor columns which are incompatible with t-test
combined_variant_table_with_col_t_test_data_sub <-  combined_variant_table_with_col %>% select(c(contains_variants_status,block_length_mb,iq_status,affected_status,total_lof_variants))
low_iq_combined_variant_table_with_col_t_test_data_sub_with_variants <- combined_variant_table_with_col_t_test_data_sub %>% filter(iq_status == 1) %>% filter(contains_variants_status == 1)
high_iq_combined_variant_table_with_col_t_test_data_sub_with_variants <- combined_variant_table_with_col_t_test_data_sub %>% filter(iq_status == 0) %>% filter(contains_variants_status == 1)
low_iq_combined_variant_table_with_col_t_test_data_sub_without_variants <- combined_variant_table_with_col_t_test_data_sub %>% filter(iq_status == 1) %>% filter(contains_variants_status == 0)
high_iq_combined_variant_table_with_col_t_test_data_sub_without_variants <- combined_variant_table_with_col_t_test_data_sub %>% filter(iq_status == 0) %>% filter(contains_variants_status == 0)
########################
#
# calculate and save standard error (se) and sample size (N) of each group
#
########################
# with variants low iq
prob_low_iq_with_lengths <- (low_iq_combined_variant_table_with_col_t_test_data_sub_with_variants %>% filter(affected_status == 1))["block_length_mb"]$block_length_mb
prob_low_iq_with_lengths_se <- std_err(prob_low_iq_with_lengths)
prob_low_iq_with_lengths_N <- length(prob_low_iq_with_lengths)
sib_low_iq_with_lengths <- (low_iq_combined_variant_table_with_col_t_test_data_sub_with_variants %>% filter(affected_status == 0))["block_length_mb"]$block_length_mb
sib_low_iq_with_lengths_se <- std_err(sib_low_iq_with_lengths)
sib_low_iq_with_lengths_N <- length(sib_low_iq_with_lengths)
# with variants high iq
prob_high_iq_with_lengths <- (high_iq_combined_variant_table_with_col_t_test_data_sub_with_variants %>% filter(affected_status == 1))["block_length_mb"]$block_length_mb
prob_high_iq_with_lengths_se <- std_err(prob_high_iq_with_lengths)
prob_high_iq_with_lengths_N <- length(prob_high_iq_with_lengths)
sib_high_iq_with_lengths <- (high_iq_combined_variant_table_with_col_t_test_data_sub_with_variants %>% filter(affected_status == 0))["block_length_mb"]$block_length_mb
sib_high_iq_with_lengths_se <- std_err(sib_high_iq_with_lengths)
sib_high_iq_with_lengths_N <- length(sib_high_iq_with_lengths)
# without variants low iq
prob_low_iq_without_lengths <- (low_iq_combined_variant_table_with_col_t_test_data_sub_without_variants %>% filter(affected_status == 1))["block_length_mb"]$block_length_mb
prob_low_iq_without_lengths_se <- std_err(prob_low_iq_without_lengths)
prob_low_iq_without_lengths_N <- length(prob_low_iq_without_lengths)
sib_low_iq_without_lengths <- (low_iq_combined_variant_table_with_col_t_test_data_sub_without_variants %>% filter(affected_status == 0))["block_length_mb"]$block_length_mb
sib_low_iq_without_lengths_se <- std_err(sib_low_iq_without_lengths)
sib_low_iq_without_lengths_N <- length(sib_low_iq_without_lengths)
# without variants high iq
prob_high_iq_without_lengths <- (high_iq_combined_variant_table_with_col_t_test_data_sub_without_variants %>% filter(affected_status == 1))["block_length_mb"]$block_length_mb
prob_high_iq_without_lengths_se <- std_err(prob_high_iq_without_lengths)
prob_high_iq_without_lengths_N <- length(prob_high_iq_without_lengths)
sib_high_iq_without_lengths <- (high_iq_combined_variant_table_with_col_t_test_data_sub_without_variants %>% filter(affected_status == 0))["block_length_mb"]$block_length_mb
sib_high_iq_without_lengths_se <- std_err(sib_high_iq_without_lengths)
sib_high_iq_without_lengths_N <- length(sib_high_iq_without_lengths)
########################
#
# Run t tests
#
########################
# Run t test without mu - Results: not significant
# low_iq_t_test_results <- t.test(block_length_mb ~ affected_status, data = low_iq_combined_variant_table_with_col_t_test_data_sub_with_variants)
# high_iq_t_test_results <- t.test(block_length_mb ~ affected_status, data = high_iq_combined_variant_table_with_col_t_test_data_sub_with_variants)
# Try setting the difference in means(mu) - Results: 1) low_iq_t_test_results_with_mu_with_variants and 2) low_iq_t_test_results_with_mu_without_variants are significant and results look good - lets check with statisticians later on.
#calculate difference in means (mu)
difference_in_means_low_iq_with <- as.numeric(probands_low_iq_block_length_summary_with_variants["Mean"]) - as.numeric(siblings_low_iq_block_length_summary_with_variants["Mean"])
difference_in_means_high_iq_with<- as.numeric(probands_high_iq_block_length_summary_with_variants["Mean"]) - as.numeric(siblings_high_iq_block_length_summary_with_variants["Mean"])
# t test with variants
low_iq_t_test_results_with_mu_with_variants <- t.test(block_length_mb ~ affected_status, mu = difference_in_means_low_iq_with, data = low_iq_combined_variant_table_with_col_t_test_data_sub_with_variants)
high_iq_t_test_results_with_mu_with_variants <- t.test(block_length_mb ~ affected_status, mu = difference_in_means_high_iq_with, data = high_iq_combined_variant_table_with_col_t_test_data_sub_with_variants)
#calculate difference in means (mu)
difference_in_means_low_iq_without <- as.numeric(probands_low_iq_block_length_summary_without_variants["Mean"]) - as.numeric(siblings_low_iq_block_length_summary_without_variants["Mean"])
difference_in_means_high_iq_without <- as.numeric(probands_high_iq_block_length_summary_without_variants["Mean"]) - as.numeric(siblings_high_iq_block_length_summary_without_variants["Mean"])
# t test without variants
low_iq_t_test_results_with_mu_without_variants <- t.test(block_length_mb ~ affected_status, mu = difference_in_means_low_iq_without, data = low_iq_combined_variant_table_with_col_t_test_data_sub_without_variants)
high_iq_t_test_results_with_mu_without_variants <- t.test(block_length_mb ~ affected_status, mu = difference_in_means_high_iq_without, data = high_iq_combined_variant_table_with_col_t_test_data_sub_without_variants)
# create output table for plotting:
# save pvalues
low_iq_with_var_pval <- low_iq_t_test_results_with_mu_with_variants$p.value
high_iq_with_var_pval <- high_iq_t_test_results_with_mu_with_variants$p.value
low_iq_without_var_pval <- low_iq_t_test_results_with_mu_without_variants$p.value
high_iq_without_var_pval <- high_iq_t_test_results_with_mu_without_variants$p.value
# # calculate SE # old SE - one se value from t-test, but we need se of means of both prob and sib. See next code section.
# low_iq_with_var_se <- get_se_to_add_to_t_test_results(low_iq_t_test_results_with_mu_with_variants)
# high_iq_with_var_se <- get_se_to_add_to_t_test_results(high_iq_t_test_results_with_mu_with_variants)
# low_iq_without_var_se <- get_se_to_add_to_t_test_results(low_iq_t_test_results_with_mu_without_variants)
# high_iq_without_var_se <- get_se_to_add_to_t_test_results(high_iq_t_test_results_with_mu_without_variants)
# save averages
pro_low_iq_with_var_avg <- as.numeric(probands_low_iq_block_length_summary_with_variants["Mean"])
sib_low_iq_with_var_avg <-  as.numeric(siblings_low_iq_block_length_summary_with_variants["Mean"])
pro_high_iq_with_var_avg <-  as.numeric(probands_high_iq_block_length_summary_with_variants["Mean"])
sib_high_iq_with_var_avg <-  as.numeric(siblings_high_iq_block_length_summary_with_variants["Mean"])
pro_low_iq_without_var_avg <-  as.numeric(probands_low_iq_block_length_summary_without_variants["Mean"])
sib_low_iq_without_var_avg <-  as.numeric(siblings_low_iq_block_length_summary_without_variants["Mean"])
pro_high_iq_without_var_avg <-  as.numeric(probands_high_iq_block_length_summary_without_variants["Mean"])
sib_high_iq_without_var_avg <-  as.numeric(siblings_high_iq_block_length_summary_without_variants["Mean"])
# deprecated in place of manual SE calculation per prob and sib means instead of t-test stderr
# low_iq_with_var_se <- get_se_to_add_to_t_test_results(low_iq_t_test_results_with_mu_with_variants)
# high_iq_with_var_se <- get_se_to_add_to_t_test_results(high_iq_t_test_results_with_mu_with_variants)
# low_iq_without_var_se <- get_se_to_add_to_t_test_results(low_iq_t_test_results_with_mu_without_variants)
# high_iq_without_var_se <- get_se_to_add_to_t_test_results(high_iq_t_test_results_with_mu_without_variants)
# dev:
# calculate sample size for each of the 8 groups
# edit assemble_each_segment_table() to include the sample size
low_iq_with_var_table <- assemble_each_segment_table("low_iq_with_var",low_iq_with_var_pval,prob_low_iq_with_lengths_se,sib_low_iq_with_lengths_se,pro_low_iq_with_var_avg,sib_low_iq_with_var_avg,segment_size,prob_low_iq_with_lengths_N,sib_low_iq_with_lengths_N)
high_iq_with_var_table <- assemble_each_segment_table("high_iq_with_var",high_iq_with_var_pval,prob_high_iq_with_lengths_se,sib_high_iq_with_lengths_se,pro_high_iq_with_var_avg,sib_high_iq_with_var_avg,segment_size,prob_high_iq_with_lengths_N,sib_high_iq_with_lengths_N)
low_iq_without_var_table <- assemble_each_segment_table("low_iq_without_var",low_iq_without_var_pval,prob_low_iq_without_lengths_se,sib_low_iq_without_lengths_se,pro_low_iq_without_var_avg,sib_low_iq_without_var_avg,segment_size,prob_low_iq_without_lengths_N,sib_low_iq_without_lengths_N)
high_iq_without_var_table <- assemble_each_segment_table("high_iq_without_var",high_iq_without_var_pval,prob_high_iq_without_lengths_se,sib_high_iq_without_lengths_se,pro_high_iq_without_var_avg,sib_high_iq_without_var_avg,segment_size,prob_high_iq_without_lengths_N,sib_high_iq_without_lengths_N)
return(list(low_iq_with_var_table,high_iq_with_var_table,low_iq_without_var_table,high_iq_without_var_table))
}
############################################################################################################################################
#
#                 Run Analysis
#
############################################################################################################################################
results_directory <-"/Users/George/ROH_autism/clean_analysis_directory/results"
plotting_data_directory <- "/Users/George/ROH_autism/clean_analysis_directory/results/plotting_data_average_lengths_t_test"
plotting_output_directory <- "/Users/George/ROH_autism/clean_analysis_directory/results/plotting_output"
############################
#
# Analysis 1: Blocks with LOF or Syn vs No Variants
#
############################
all_res_tables_2000kb <- run_t_test_and_assemble_avg_length_data_for_plotting_either_lof_or_syn_variants("probands_roh_block_variant_annotation_table_pph2_cat_2000kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_2000kb.txt",2000,results_directory)
all_res_tables_2500kb <- run_t_test_and_assemble_avg_length_data_for_plotting_either_lof_or_syn_variants("probands_roh_block_variant_annotation_table_pph2_cat_2500kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_2500kb.txt",2500,results_directory)
all_res_tables_3000kb <- run_t_test_and_assemble_avg_length_data_for_plotting_either_lof_or_syn_variants("probands_roh_block_variant_annotation_table_pph2_cat_3000kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_3000kb.txt",3000,results_directory)
all_res_tables_3500kb <- run_t_test_and_assemble_avg_length_data_for_plotting_either_lof_or_syn_variants("probands_roh_block_variant_annotation_table_pph2_cat_3500kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_3500kb.txt",3500,results_directory)
# assemble plotting tables for all four segments:
results_names <- c("low_iq_with_lof_or_syn_variants","high_iq_with_lof_or_syn_variants","low_iq_without_lof_or_syn_variants","high_iq_without_lof_or_syn_variants")
for (i in 1:4){
results_name <- results_names[i]
results_for_plotting <- rbind(all_res_tables_2000kb[[i]], all_res_tables_2500kb[[i]], all_res_tables_3000kb[[i]], all_res_tables_3500kb[[i]])
write.table(results_for_plotting,file.path(plotting_data_directory,paste0(results_name,"_avg_block_length_data_for_plotting")),sep=",",row.names = F)
}
# define data tables for plotting to produce
list_of_files_to_plot <- c("low_iq_with_lof_or_syn_variants_avg_block_length_data_for_plotting","high_iq_with_lof_or_syn_variants_avg_block_length_data_for_plotting","low_iq_without_lof_or_syn_variants_avg_block_length_data_for_plotting","high_iq_without_lof_or_syn_variants_avg_block_length_data_for_plotting")
plot_titles <- c("Average Length of ROH Blocks \nContaining LOF or Syn Variants Among Probands and Siblings \nwith IQ <= 70", "Average Length of ROH Blocks \nContaining LOF or Syn  Variants Among Probands and Siblings \nwith IQ > 70", "Average Length of ROH Blocks \nWithout LOF or Syn  Variants Among Probands and Siblings \nwith IQ <= 70", "Average Length of ROH Blocks \nWithout LOF or Syn  Variants Among Probands and Siblings \nwith IQ > 70")
for (list_num in 1:4){
# !~!!!!!def on:
#list_num=1
#!~!!!!! :def off
file_to_plot <- list_of_files_to_plot[list_num]
plot_title <- plot_titles[list_num]
plot_filename_1<- gsub(" ", "_", paste0(plot_title))
plot_filename<- gsub("\n", "", paste0(plot_filename_1))
# load data for plotting
data_table_preplotting <- read.table(file.path(plotting_data_directory,file_to_plot),sep=",",header=T)
# add pval text
pval_text_col <- data.frame(matrix(ncol = 1, nrow = nrow(data_table_preplotting)))
for (segment_row in 1:nrow(data_table_preplotting)){
pval_per_segment <- data_table_preplotting[segment_row,"pval"]
per_segment_pval_text <- convert_pval_significance_to_text(pval_per_segment)
pval_text_col[segment_row,] <- per_segment_pval_text
}
colnames(pval_text_col) <- "pval_text_annotations"
data_table_for_plotting <- cbind(data_table_preplotting,pval_text_col)
# geom_errorbar expects the x value (segment size) to be a factor when deciding where to place the error bars
data_table_for_plotting$segment_size=as.factor(data_table_for_plotting$segment_size)
data_table_for_plotting$affected_status <- str_to_title(data_table_for_plotting$affected_status)
# plot
ggplot(data_table_for_plotting, aes(y=avg_block_length, x=segment_size, fill=affected_status)) +
geom_bar(stat="identity",position=position_dodge(),color="black") +
geom_errorbar(aes(ymin=avg_block_length-se, ymax=avg_block_length+se), width=0.2, position=position_dodge(0.9)) +
labs(x = "Minimum Segment Size (Kb)", y = "Average ROH Block Length (Mb)") +
theme(plot.title = element_text(size=7,hjust=0.5), axis.title.y = element_text(size=10), axis.title.x= element_text(size=10),axis.text.x = element_text(size=9),axis.text.y = element_text(size=9)) +
theme_bw() +
theme(
# legend.position = "right",
legend.title = element_blank(),
legend.text=element_text(size=20),
plot.title = element_text(size=8,hjust=0.5),
axis.title.y = element_text(size=22),
axis.title.x= element_text(size=22),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14)
) +
geom_text(size=4,label = paste("n = ",data_table_for_plotting$sample_size),position = position_dodge(width= 0.9), aes(y=0.53), angle=90) +
annotate("text", size=10, x = "2000", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==2000)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==2000)[1],"pval_text_annotations"]) +
annotate("text", size=10, x = "2500", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==2500)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==2500)[1],"pval_text_annotations"]) +
annotate("text", size=10, x = "3000", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==3000)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==3000)[1],"pval_text_annotations"]) +
annotate("text", size=10, x = "3500", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==3500)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==3500)[1],"pval_text_annotations"])
# change to pdf or tiff to prepare publication figures
ggsave(file.path(plotting_output_directory,paste0(plot_filename,"_grouped_barplot.png")), width = 9, height = 8)
}
############################
#
# Analysis 2: Blocks with Both LOF And Syn vs No Variants
#
############################
all_res_tables_2000kb <- run_t_test_and_assemble_avg_length_data_for_plotting_both_lof_and_syn_variants("probands_roh_block_variant_annotation_table_pph2_cat_2000kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_2000kb.txt",2000,results_directory)
all_res_tables_2500kb <- run_t_test_and_assemble_avg_length_data_for_plotting_both_lof_and_syn_variants("probands_roh_block_variant_annotation_table_pph2_cat_2500kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_2500kb.txt",2500,results_directory)
all_res_tables_3000kb <- run_t_test_and_assemble_avg_length_data_for_plotting_both_lof_and_syn_variants("probands_roh_block_variant_annotation_table_pph2_cat_3000kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_3000kb.txt",3000,results_directory)
all_res_tables_3500kb <- run_t_test_and_assemble_avg_length_data_for_plotting_both_lof_and_syn_variants("probands_roh_block_variant_annotation_table_pph2_cat_3500kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_3500kb.txt",3500,results_directory)
# assemble plotting tables for all four segments:
results_names <- c("low_iq_with_lof_and_syn_variants","high_iq_with_lof_and_syn_variants","low_iq_without_lof_and_syn_variants","high_iq_without_lof_and_syn_variants")
for (i in 1:4){
results_name <- results_names[i]
results_for_plotting <- rbind(all_res_tables_2000kb[[i]], all_res_tables_2500kb[[i]], all_res_tables_3000kb[[i]], all_res_tables_3500kb[[i]])
write.table(results_for_plotting,file.path(plotting_data_directory,paste0(results_name,"_avg_block_length_data_for_plotting")),sep=",",row.names = F)
}
# define data tables for plotting to produce
list_of_files_to_plot <- c("low_iq_with_lof_and_syn_variants_avg_block_length_data_for_plotting","high_iq_with_lof_and_syn_variants_avg_block_length_data_for_plotting","low_iq_without_lof_and_syn_variants_avg_block_length_data_for_plotting","high_iq_without_lof_and_syn_variants_avg_block_length_data_for_plotting")
plot_titles <- c("Average Length of ROH Blocks \nContaining LOF and Syn Variants Among Probands and Siblings \nwith IQ <= 70", "Average Length of ROH Blocks \nContaining LOF and Syn  Variants Among Probands and Siblings \nwith IQ > 70", "Average Length of ROH Blocks \nWithout LOF and Syn  Variants Among Probands and Siblings \nwith IQ <= 70", "Average Length of ROH Blocks \nWithout LOF and Syn  Variants Among Probands and Siblings \nwith IQ > 70")
for (list_num in 1:4){
file_to_plot <- list_of_files_to_plot[list_num]
plot_title <- plot_titles[list_num]
plot_filename_1<- gsub(" ", "_", paste0(plot_title))
plot_filename<- gsub("\n", "", paste0(plot_filename_1))
# load data for plotting
data_table_preplotting <- read.table(file.path(plotting_data_directory,file_to_plot),sep=",",header=T)
# add pval text
pval_text_col <- data.frame(matrix(ncol = 1, nrow = nrow(data_table_preplotting)))
for (segment_row in 1:nrow(data_table_preplotting)){
pval_per_segment <- data_table_preplotting[segment_row,"pval"]
per_segment_pval_text <- convert_pval_significance_to_text(pval_per_segment)
pval_text_col[segment_row,] <- per_segment_pval_text
}
colnames(pval_text_col) <- "pval_text_annotations"
data_table_for_plotting <- cbind(data_table_preplotting,pval_text_col)
# geom_errorbar expects the x value (segment size) to be a factor when deciding where to place the error bars
data_table_for_plotting$segment_size=as.factor(data_table_for_plotting$segment_size)
data_table_for_plotting$affected_status <- str_to_title(data_table_for_plotting$affected_status)
# plot
# ggplot(data_table_for_plotting, aes(y=avg_block_length, x=segment_size, fill=affected_status)) +
#   geom_bar(stat="identity",position=position_dodge(),color="black") +
#   geom_errorbar(aes(ymin=avg_block_length-se, ymax=avg_block_length+se), width=0.2, position=position_dodge(0.9)) +
#   labs(x = "Minimum Segment Size (Kb)", y = "Average ROH Block Length (Mb)") +
#   theme(plot.title = element_text(size=7,hjust=0.5), axis.title.y = element_text(size=10), axis.title.x= element_text(size=10),axis.text.x = element_text(size=9),axis.text.y = element_text(size=9)) +
#   theme_bw() +
#   theme(
#     # legend.position = "right",
#     legend.title = element_blank(),
#     plot.title = element_text(size=8,hjust=0.5),
#     axis.title.y = element_text(size=7),
#     axis.title.x= element_text(size=7),
#     axis.text.x = element_text(size=7),
#     axis.text.y = element_text(size=7)
#   ) +
#   geom_text(size=1.5,label = paste("n = ",data_table_for_plotting$sample_size),position = position_dodge(width= 0.9), aes(y=avg_block_length + se + 0.5), angle=0) +
#   annotate("text", size=10, x = "2000", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==2000)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==2000)[1],"pval_text_annotations"]) +
#   annotate("text", size=10, x = "2500", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==2500)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==2500)[1],"pval_text_annotations"]) +
#   annotate("text", size=10, x = "3000", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==3000)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==3000)[1],"pval_text_annotations"]) +
#   annotate("text", size=10, x = "3500", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==3500)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==3500)[1],"pval_text_annotations"])
#
# # change to pdf or tiff to prepare publication figures
# ggsave(file.path(plotting_output_directory,paste0(plot_filename,"_grouped_barplot.png")), width = 4, height = 4)
ggplot(data_table_for_plotting, aes(y=avg_block_length, x=segment_size, fill=affected_status)) +
geom_bar(stat="identity",position=position_dodge(),color="black") +
geom_errorbar(aes(ymin=avg_block_length-se, ymax=avg_block_length+se), width=0.2, position=position_dodge(0.9)) +
labs(x = "Minimum Segment Size (Kb)", y = "Average ROH Block Length (Mb)") +
theme(plot.title = element_text(size=7,hjust=0.5), axis.title.y = element_text(size=10), axis.title.x= element_text(size=10),axis.text.x = element_text(size=9),axis.text.y = element_text(size=9)) +
theme_bw() +
theme(
# legend.position = "right",
legend.title = element_blank(),
legend.text=element_text(size=20),
plot.title = element_text(size=8,hjust=0.5),
axis.title.y = element_text(size=22),
axis.title.x= element_text(size=22),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14)
) +
geom_text(size=4,label = paste("n = ",data_table_for_plotting$sample_size),position = position_dodge(width= 0.9), aes(y=0.53), angle=90) +
annotate("text", size=10, x = "2000", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==2000)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==2000)[1],"pval_text_annotations"]) +
annotate("text", size=10, x = "2500", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==2500)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==2500)[1],"pval_text_annotations"]) +
annotate("text", size=10, x = "3000", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==3000)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==3000)[1],"pval_text_annotations"]) +
annotate("text", size=10, x = "3500", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==3500)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==3500)[1],"pval_text_annotations"])
# change to pdf or tiff to prepare publication figures
ggsave(file.path(plotting_output_directory,paste0(plot_filename,"_grouped_barplot.png")), width = 9, height = 8)
}
############################
#
# Analysis 3: Blocks with Syn variants only
#
############################
all_res_tables_2000kb <- run_t_test_and_assemble_avg_length_data_for_plotting_syn_variants_only("probands_roh_block_variant_annotation_table_pph2_cat_2000kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_2000kb.txt",2000,results_directory)
all_res_tables_2500kb <- run_t_test_and_assemble_avg_length_data_for_plotting_syn_variants_only("probands_roh_block_variant_annotation_table_pph2_cat_2500kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_2500kb.txt",2500,results_directory)
all_res_tables_3000kb <- run_t_test_and_assemble_avg_length_data_for_plotting_syn_variants_only("probands_roh_block_variant_annotation_table_pph2_cat_3000kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_3000kb.txt",3000,results_directory)
all_res_tables_3500kb <- run_t_test_and_assemble_avg_length_data_for_plotting_syn_variants_only("probands_roh_block_variant_annotation_table_pph2_cat_3500kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_3500kb.txt",3500,results_directory)
# assemble plotting tables for all four segments:
results_names <- c("low_iq_with_syn_variants","high_iq_with_syn_variants","low_iq_without_syn_variants","high_iq_without_syn_variants")
for (i in 1:4){
results_name <- results_names[i]
results_for_plotting <- rbind(all_res_tables_2000kb[[i]], all_res_tables_2500kb[[i]], all_res_tables_3000kb[[i]], all_res_tables_3500kb[[i]])
write.table(results_for_plotting,file.path(plotting_data_directory,paste0(results_name,"_avg_block_length_data_for_plotting")),sep=",",row.names = F)
}
# define data tables for plotting to produce
list_of_files_to_plot <- c("low_iq_with_syn_variants_avg_block_length_data_for_plotting","high_iq_with_syn_variants_avg_block_length_data_for_plotting","low_iq_without_syn_variants_avg_block_length_data_for_plotting","high_iq_without_syn_variants_avg_block_length_data_for_plotting")
plot_titles <- c("Average Length of ROH Blocks \nContaining Syn Variants Only Among Probands and Siblings \nwith IQ <= 70", "Average Length of ROH Blocks \nContaining Syn Variants Only Among Probands and Siblings \nwith IQ > 70", "Average Length of ROH Blocks \nWithout Syn Variants Only Among Probands and Siblings \nwith IQ <= 70", "Average Length of ROH Blocks \nWithout Syn Variants Only Among Probands and Siblings \nwith IQ > 70")
for (list_num in 1:4){
file_to_plot <- list_of_files_to_plot[list_num]
plot_title <- plot_titles[list_num]
plot_filename_1<- gsub(" ", "_", paste0(plot_title))
plot_filename<- gsub("\n", "", paste0(plot_filename_1))
# load data for plotting
data_table_preplotting <- read.table(file.path(plotting_data_directory,file_to_plot),sep=",",header=T)
# add pval text
pval_text_col <- data.frame(matrix(ncol = 1, nrow = nrow(data_table_preplotting)))
for (segment_row in 1:nrow(data_table_preplotting)){
pval_per_segment <- data_table_preplotting[segment_row,"pval"]
per_segment_pval_text <- convert_pval_significance_to_text(pval_per_segment)
pval_text_col[segment_row,] <- per_segment_pval_text
}
colnames(pval_text_col) <- "pval_text_annotations"
data_table_for_plotting <- cbind(data_table_preplotting,pval_text_col)
# geom_errorbar expects the x value (segment size) to be a factor when deciding where to place the error bars
data_table_for_plotting$segment_size=as.factor(data_table_for_plotting$segment_size)
data_table_for_plotting$affected_status <- str_to_title(data_table_for_plotting$affected_status)
# plot
# ggplot(data_table_for_plotting, aes(y=avg_block_length, x=segment_size, fill=affected_status)) +
#   geom_bar(stat="identity",position=position_dodge(),color="black") +
#   geom_errorbar(aes(ymin=avg_block_length-se, ymax=avg_block_length+se), width=0.2, position=position_dodge(0.9)) +
#   labs(x = "Minimum Segment Size (Kb)", y = "Average ROH Block Length (Mb)") +
#   theme(plot.title = element_text(size=7,hjust=0.5), axis.title.y = element_text(size=10), axis.title.x= element_text(size=10),axis.text.x = element_text(size=9),axis.text.y = element_text(size=9)) +
#   theme_bw() +
#   theme(
#     # legend.position = "right",
#     legend.title = element_blank(),
#     plot.title = element_text(size=8,hjust=0.5),
#     axis.title.y = element_text(size=7),
#     axis.title.x= element_text(size=7),
#     axis.text.x = element_text(size=7),
#     axis.text.y = element_text(size=7)
#   ) +
#   geom_text(size=1.5,label = paste("n = ",data_table_for_plotting$sample_size),position = position_dodge(width= 0.9), aes(y=avg_block_length + se + 0.5), angle=0) +
#   annotate("text", size=10, x = "2000", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==2000)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==2000)[1],"pval_text_annotations"]) +
#   annotate("text", size=10, x = "2500", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==2500)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==2500)[1],"pval_text_annotations"]) +
#   annotate("text", size=10, x = "3000", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==3000)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==3000)[1],"pval_text_annotations"]) +
#   annotate("text", size=10, x = "3500", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==3500)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==3500)[1],"pval_text_annotations"])
#
# # change to pdf or tiff to prepare publication figures
# ggsave(file.path(plotting_output_directory,paste0(plot_filename,"_grouped_barplot.png")), width = 4, height = 4)
#
ggplot(data_table_for_plotting, aes(y=avg_block_length, x=segment_size, fill=affected_status)) +
geom_bar(stat="identity",position=position_dodge(),color="black") +
geom_errorbar(aes(ymin=avg_block_length-se, ymax=avg_block_length+se), width=0.2, position=position_dodge(0.9)) +
labs(x = "Minimum Segment Size (Kb)", y = "Average ROH Block Length (Mb)") +
theme(plot.title = element_text(size=7,hjust=0.5), axis.title.y = element_text(size=10), axis.title.x= element_text(size=10),axis.text.x = element_text(size=9),axis.text.y = element_text(size=9)) +
theme_bw() +
theme(
# legend.position = "right",
legend.title = element_blank(),
legend.text=element_text(size=20),
plot.title = element_text(size=8,hjust=0.5),
axis.title.y = element_text(size=22),
axis.title.x= element_text(size=22),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14)
) +
geom_text(size=4,label = paste("n = ",data_table_for_plotting$sample_size),position = position_dodge(width= 0.9), aes(y=0.53), angle=90) +
annotate("text", size=10, x = "2000", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==2000)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==2000)[1],"pval_text_annotations"]) +
annotate("text", size=10, x = "2500", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==2500)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==2500)[1],"pval_text_annotations"]) +
annotate("text", size=10, x = "3000", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==3000)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==3000)[1],"pval_text_annotations"]) +
annotate("text", size=10, x = "3500", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==3500)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==3500)[1],"pval_text_annotations"])
# change to pdf or tiff to prepare publication figures
ggsave(file.path(plotting_output_directory,paste0(plot_filename,"_grouped_barplot.png")), width = 9, height = 8)
}
############################
#
# Analysis 4: Blocks with LOF variants only
#
############################
all_res_tables_2000kb <- run_t_test_and_assemble_avg_length_data_for_plotting_lof_variants_only("probands_roh_block_variant_annotation_table_pph2_cat_2000kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_2000kb.txt",2000,results_directory)
all_res_tables_2500kb <- run_t_test_and_assemble_avg_length_data_for_plotting_lof_variants_only("probands_roh_block_variant_annotation_table_pph2_cat_2500kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_2500kb.txt",2500,results_directory)
all_res_tables_3000kb <- run_t_test_and_assemble_avg_length_data_for_plotting_lof_variants_only("probands_roh_block_variant_annotation_table_pph2_cat_3000kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_3000kb.txt",3000,results_directory)
all_res_tables_3500kb <- run_t_test_and_assemble_avg_length_data_for_plotting_lof_variants_only("probands_roh_block_variant_annotation_table_pph2_cat_3500kb.txt","siblings_roh_block_variant_annotation_table_pph2_cat_3500kb.txt",3500,results_directory)
# assemble plotting tables for all four segments:
results_names <- c("low_iq_with_lof_variants","high_iq_with_lof_variants","low_iq_without_lof_variants","high_iq_without_lof_variants")
for (i in 1:4){
results_name <- results_names[i]
results_for_plotting <- rbind(all_res_tables_2000kb[[i]], all_res_tables_2500kb[[i]], all_res_tables_3000kb[[i]], all_res_tables_3500kb[[i]])
write.table(results_for_plotting,file.path(plotting_data_directory,paste0(results_name,"_avg_block_length_data_for_plotting")),sep=",",row.names = F)
}
# define data tables for plotting to produce
list_of_files_to_plot <- c("low_iq_with_lof_variants_avg_block_length_data_for_plotting","high_iq_with_lof_variants_avg_block_length_data_for_plotting","low_iq_without_lof_variants_avg_block_length_data_for_plotting","high_iq_without_lof_variants_avg_block_length_data_for_plotting")
plot_titles <- c("Average Length of ROH Blocks \nContaining LOF Variants Only Among Probands and Siblings \nwith IQ <= 70", "Average Length of ROH Blocks \nContaining LOF Variants Only Among Probands and Siblings \nwith IQ > 70", "Average Length of ROH Blocks \nWithout LOF Variants Only Among Probands and Siblings \nwith IQ <= 70", "Average Length of ROH Blocks \nWithout LOF Variants Only Among Probands and Siblings \nwith IQ > 70")
for (list_num in 1:4){
file_to_plot <- list_of_files_to_plot[list_num]
plot_title <- plot_titles[list_num]
plot_filename_1<- gsub(" ", "_", paste0(plot_title))
plot_filename<- gsub("\n", "", paste0(plot_filename_1))
# load data for plotting
data_table_preplotting <- read.table(file.path(plotting_data_directory,file_to_plot),sep=",",header=T)
# add pval text
pval_text_col <- data.frame(matrix(ncol = 1, nrow = nrow(data_table_preplotting)))
for (segment_row in 1:nrow(data_table_preplotting)){
pval_per_segment <- data_table_preplotting[segment_row,"pval"]
per_segment_pval_text <- convert_pval_significance_to_text(pval_per_segment)
pval_text_col[segment_row,] <- per_segment_pval_text
}
colnames(pval_text_col) <- "pval_text_annotations"
data_table_for_plotting <- cbind(data_table_preplotting,pval_text_col)
# geom_errorbar expects the x value (segment size) to be a factor when deciding where to place the error bars
data_table_for_plotting$segment_size=as.factor(data_table_for_plotting$segment_size)
data_table_for_plotting$affected_status <- str_to_title(data_table_for_plotting$affected_status)
# plot
# ggplot(data_table_for_plotting, aes(y=avg_block_length, x=segment_size, fill=affected_status)) +
#   geom_bar(stat="identity",position=position_dodge(),color="black") +
#   geom_errorbar(aes(ymin=avg_block_length-se, ymax=avg_block_length+se), width=0.2, position=position_dodge(0.9)) +
#   labs(x = "Minimum Segment Size (Kb)", y = "Average ROH Block Length (Mb)") +
#   theme(plot.title = element_text(size=7,hjust=0.5), axis.title.y = element_text(size=10), axis.title.x= element_text(size=10),axis.text.x = element_text(size=9),axis.text.y = element_text(size=9)) +
#   theme_bw() +
#   theme(
#     # legend.position = "right",
#     legend.title = element_blank(),
#     plot.title = element_text(size=8,hjust=0.5),
#     axis.title.y = element_text(size=7),
#     axis.title.x= element_text(size=7),
#     axis.text.x = element_text(size=7),
#     axis.text.y = element_text(size=7)
#   ) +
#   geom_text(size=1.5,label = paste("n = ",data_table_for_plotting$sample_size),position = position_dodge(width= 0.9), aes(y=avg_block_length + se + 0.5), angle=0) +
#   annotate("text", size=10, x = "2000", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==2000)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==2000)[1],"pval_text_annotations"]) +
#   annotate("text", size=10, x = "2500", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==2500)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==2500)[1],"pval_text_annotations"]) +
#   annotate("text", size=10, x = "3000", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==3000)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==3000)[1],"pval_text_annotations"]) +
#   annotate("text", size=10, x = "3500", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==3500)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==3500)[1],"pval_text_annotations"])
#
# # change to pdf or tiff to prepare publication figures
# ggsave(file.path(plotting_output_directory,paste0(plot_filename,"_grouped_barplot.png")), width = 4, height = 4)
ggplot(data_table_for_plotting, aes(y=avg_block_length, x=segment_size, fill=affected_status)) +
geom_bar(stat="identity",position=position_dodge(),color="black") +
geom_errorbar(aes(ymin=avg_block_length-se, ymax=avg_block_length+se), width=0.2, position=position_dodge(0.9)) +
labs(x = "Minimum Segment Size (Kb)", y = "Average ROH Block Length (Mb)") +
theme(plot.title = element_text(size=7,hjust=0.5), axis.title.y = element_text(size=10), axis.title.x= element_text(size=10),axis.text.x = element_text(size=9),axis.text.y = element_text(size=9)) +
theme_bw() +
theme(
# legend.position = "right",
legend.title = element_blank(),
legend.text=element_text(size=20),
plot.title = element_text(size=8,hjust=0.5),
axis.title.y = element_text(size=22),
axis.title.x= element_text(size=22),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14)
) +
geom_text(size=4,label = paste("n = ",data_table_for_plotting$sample_size),position = position_dodge(width= 0.9), aes(y=0.53), angle=90) +
annotate("text", size=10, x = "2000", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==2000)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==2000)[1],"pval_text_annotations"]) +
annotate("text", size=10, x = "2500", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==2500)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==2500)[1],"pval_text_annotations"]) +
annotate("text", size=10, x = "3000", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==3000)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==3000)[1],"pval_text_annotations"]) +
annotate("text", size=10, x = "3500", y = data_table_for_plotting[which(data_table_for_plotting$segment_size==3500)[1],"avg_block_length"]+0.1, label = data_table_for_plotting[which(data_table_for_plotting$segment_size==3500)[1],"pval_text_annotations"])
# change to pdf or tiff to prepare publication figures
ggsave(file.path(plotting_output_directory,paste0(plot_filename,"_grouped_barplot.png")), width = 9, height = 8)
}
